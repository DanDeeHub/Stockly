@inherits LayoutComponentBase
@using Stockly.Services
@inject UserStateService UserState
@inject DrawerService DrawerService

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" 
                      Color="Color.Inherit" 
                      Edge="Edge.Start" 
                      OnClick="@((e) => DrawerService.Toggle())" 
                      Disabled="@(!UserState.IsAuthenticated)" />
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
        <MudSpacer />
        <MudText Typo="Typo.caption">Hello, @(string.IsNullOrEmpty(UserState.Username) ? "Guest" : UserState.Username)</MudText>
    </MudAppBar>
    <MudDrawer @bind-Open="DrawerService.IsOpen" Elevation="2" Breakpoint="Breakpoint.Md" Variant="DrawerVariant.Temporary">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Class="mt-1">Stockly</MudText>
        </MudDrawerHeader>
        @if (UserState.IsAuthenticated)
        {
            <NavMenu />
        }
    </MudDrawer>
    <MudMainContent>
       @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
        
        UserState.OnChange += OnUserStateChanged;
        DrawerService.OnChange += StateHasChanged;
        
        // Ensure drawer starts closed
        DrawerService.Close();
    }

    private void OnUserStateChanged()
    {
        UpdateDrawerState();
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            UpdateDrawerState();
        }
    }

    private void UpdateDrawerState()
    {
        if (!UserState.IsAuthenticated)
        {
            DrawerService.Close();
        }
        // Don't automatically open drawer when user is authenticated
        // Let user control it manually via the menu button
    }

    public void Dispose()
    {
        UserState.OnChange -= OnUserStateChanged;
        DrawerService.OnChange -= StateHasChanged;
    }



    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}


