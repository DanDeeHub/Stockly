@page "/OpeningInventory"
@using Stockly.Services
@inject FirebaseService FirebaseService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject UserStateService UserState

<PageTitle>Opening Inventory</PageTitle>

<AuthorizedPageBase PageName="OpeningInventory">
    <div class="pa-2 pa-sm-4">
        <!-- Header -->
        <div class="d-flex flex-column flex-sm-row justify-space-between align-start align-sm-center mb-3 mb-sm-6">
            <MudText Typo="Typo.h4" Class="mb-2 mb-sm-0">Opening Inventory</MudText>
        </div>
        
        <!-- Search and Filter Section -->
        <MudCard Elevation="0" Class="mb-3 mb-sm-4">
            <MudCardContent Class="pa-2 pa-sm-4">
                <div class="d-flex gap-2 align-center" style="align-items: center;">
                    <MudTextField @bind-Value="_searchString" Placeholder="Search products or categories..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" Variant="Variant.Outlined" Style="height: 40px; flex: 1; min-height: 40px; max-height: 40px; line-height: 40px;" />
                                         <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FilterList" Size="Size.Small" Style="height: 40px; min-width: 100px; min-height: 40px; max-height: 40px; line-height: 40px;" OnClick="OpenFilterModal">Filter</MudButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" Style="height: 40px; width: 40px; min-height: 40px; max-height: 40px; line-height: 40px;" OnClick="ClearAllFilters" title="Clear all filters" Color="Color.Secondary" Variant="Variant.Outlined"></MudIconButton>
                </div>
            </MudCardContent>
        </MudCard>
        
        <!-- Loading State -->
        @if (_isLoading)
        {
            <MudCard Elevation="0">
                <MudCardContent Class="pa-4 text-center">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    <MudText Class="mt-2">Loading products...</MudText>
                </MudCardContent>
            </MudCard>
        }
        else
        {
            <!-- Products Table -->
            <MudCard Elevation="0">
                <MudCardContent Class="pa-2 pa-sm-4">
                    @if (FilteredProducts.Any())
                    {
                                                 <MudTable Items="@FilteredProducts" Dense="true" Hover="true" Striped="true" Breakpoint="Breakpoint.Xs" Responsive="true">
                                                          <HeaderContent>
                                 <MudTh>Product Name</MudTh>
                                 <MudTh>Category</MudTh>
                                 <MudTh>Modified</MudTh>
                                   @if (UserState.Role != "opening" && UserState.Role != "admin")
                                  {
                                      <MudTh>Stock</MudTh>
                                  }
                                 <MudTh>Action</MudTh>
                             </HeaderContent>
                                                                                      <RowTemplate>
                                   <MudTd>@context.Name</MudTd>
                                   <MudTd>@context.Category</MudTd>
                                                                       <MudTd>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            @if (context.LastUpdated.HasValue)
                                            {
                                                @GetFormattedLastModified(context)
                                            }
                                            else
                                            {
                                                <MudText Color="Color.Info" Typo="Typo.caption">New</MudText>
                                            }
                                        </MudText>
                                    </MudTd>
                                    @if (UserState.Role != "opening" && UserState.Role != "admin")
                                   {
                                       <MudTd>@context.Stock</MudTd>
                                   }
                                  <MudTd>
                                      <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                                          <MudMenuItem OnClick="@(() => EditProduct(context))">Update</MudMenuItem>
                                          <MudMenuItem OnClick="@(() => AddStockProduct(context))">Add Stock</MudMenuItem>
                                      </MudMenu>
                                  </MudTd>
                              </RowTemplate>
                             <PagerContent><MudTablePager /></PagerContent>
                         </MudTable>
                    }
                    else
                    {
                        <div class="text-center pa-4">
                            <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" Color="Color.Primary" />
                            <MudText Typo="Typo.h6" Class="mt-2">No products found</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Add your first product to get started</MudText>
                        </div>
                    }
                </MudCardContent>
            </MudCard>
        }
    </div>
    
    <!-- Add Product Modal -->
    @if (_isAddProductDialogOpen)
    {
        <MudOverlay Visible="true" DarkBackground="true" ZIndex="1000">
            <MudCard Style="width: 95%; max-width: 400px; height: 85vh; margin: 0 auto; display: flex; flex-direction: column;" Class="pa-2 pa-sm-4">
                <MudCardHeader Style="position: relative; flex-shrink: 0;" Class="pa-2 pa-sm-4">
                    <MudText Typo="Typo.h6">Add New Product</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                  OnClick="CloseModal" 
                                  Size="Size.Small" 
                                  Color="Color.Inherit"
                                  Style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%);" />
                </MudCardHeader>
                
                <MudCardContent Class="pa-2 pa-sm-4" Style="flex: 1; overflow-y: auto;">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="_newProduct.Name" Label="Product Name" Variant="Variant.Outlined" Required="true" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudAutocomplete T="string" @bind-Value="_newProduct.Category" Label="Category" Variant="Variant.Outlined" Required="true" 
                                             SearchFunc="SearchCategories" ToStringFunc="@(category => category)" 
                                             allowCustomValue="true"
                                             MaxItems="5" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudNumericField @bind-Value="_newProduct.Stock" Label="Stock Quantity" Variant="Variant.Outlined" Required="true" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudNumericField @bind-Value="_newProduct.LowStockThreshold" Label="Low Stock Threshold" Variant="Variant.Outlined" Required="true" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudNumericField @bind-Value="_newProduct.Price" Label="Price" Variant="Variant.Outlined" Required="true" Adornment="Adornment.Start" AdornmentText="₱" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                                Status: <MudText Color="@GetStatusColor(_newProduct.Stock, _newProduct.LowStockThreshold)" Typo="Typo.body2">@GetStatusText(_newProduct.Stock, _newProduct.LowStockThreshold)</MudText>
                            </MudText>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                
                <MudCardActions Class="justify-start pa-2 pa-sm-4" Style="flex-shrink: 0;">
                                         <MudButton OnClick="CloseModal" Variant="Variant.Text" Class="mr-2" Disabled="@_isSaving">Cancel</MudButton>
                                         <MudButton OnClick="SaveProduct" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_isSaving">
                        @if (_isSaving)
                        {
                            <MudProgressCircular Size="Size.Small" Color="Color.Inherit" Indeterminate="true" />
                        }
                        else
                        {
                            <span>Save Product</span>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudOverlay>
    }

    <!-- Edit Product Modal -->
    @if (_isEditProductDialogOpen)
    {
        <MudOverlay Visible="true" DarkBackground="true" ZIndex="1000">
            <MudCard Style="width: 95%; max-width: 400px; height: 85vh; margin: 0 auto; display: flex; flex-direction: column;" Class="pa-2 pa-sm-4">
                                 <MudCardHeader Style="position: relative; flex-shrink: 0;" Class="pa-2 pa-sm-4">
                     <MudText Typo="Typo.h6">@((UserState.Role == "opening" || UserState.Role == "admin") ? "Set Opening Inventory" : "Update Product")</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                  OnClick="CloseEditModal" 
                                  Size="Size.Small" 
                                  Color="Color.Inherit"
                                  Style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%);" />
                </MudCardHeader>
                
                                 <MudCardContent Class="pa-2 pa-sm-4" Style="flex: 1; overflow-y: auto;">
                     <MudGrid>
                         <MudItem xs="12">
                             <MudTextField @bind-Value="_editingProduct.Name" Label="Product Name" Variant="Variant.Outlined" ReadOnly="true" />
                         </MudItem>
                         <MudItem xs="12">
                             <MudTextField @bind-Value="_editingProduct.Category" Label="Category" Variant="Variant.Outlined" ReadOnly="true" />
                         </MudItem>
                         <MudItem xs="12">
                             <MudNumericField @bind-Value="_editingProduct.Stock" Label="@((UserState.Role == "opening" || UserState.Role == "admin") ? "Opening Quantity" : "Update Quantity")" Variant="Variant.Outlined" Required="true" />
                         </MudItem>
                                                   @if (UserState.Role == "opening" || UserState.Role == "admin")
                          {
                              <MudItem xs="12">
                                                                     <MudAlert Severity="Severity.Info" Class="mt-2">
                                       <MudText Typo="Typo.body2">
                                           Note: Opening users cannot view total stock quantities. The quantity shown is for update purposes only.
                                       </MudText>
                                   </MudAlert>
                              </MudItem>
                          }
                     </MudGrid>
                 </MudCardContent>
                
                <MudCardActions Class="justify-start pa-2 pa-sm-4" Style="flex-shrink: 0;">
                                         <MudButton OnClick="CloseEditModal" Variant="Variant.Text" Class="mr-2" Disabled="@_isSaving">Cancel</MudButton>
                                         <MudButton OnClick="UpdateProduct" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_isSaving">
                        @if (_isSaving)
                        {
                            <MudProgressCircular Size="Size.Small" Color="Color.Inherit" Indeterminate="true" />
                        }
                        else
                        {
                                                         <span>@((UserState.Role == "opening" || UserState.Role == "admin") ? "Set Opening Inventory" : "Update Product")</span>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudOverlay>
    }

    <!-- Add Stock Modal -->
    @if (_isAddStockDialogOpen)
    {
        <MudOverlay Visible="true" DarkBackground="true" ZIndex="1000">
            <MudCard Style="width: 95%; max-width: 400px; height: 85vh; margin: 0 auto; display: flex; flex-direction: column;" Class="pa-2 pa-sm-4">
                <MudCardHeader Style="position: relative; flex-shrink: 0;" Class="pa-2 pa-sm-4">
                    <MudText Typo="Typo.h6">Add Stock</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                  OnClick="CloseAddStockModal" 
                                  Size="Size.Small" 
                                  Color="Color.Inherit"
                                  Style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%);" />
                </MudCardHeader>
                
                <MudCardContent Class="pa-2 pa-sm-4" Style="flex: 1; overflow-y: auto;">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="_addingStockProduct.Name" Label="Product Name" Variant="Variant.Outlined" ReadOnly="true" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudNumericField @bind-Value="_addStockQuantity" Label="Add Stock Quantity" Variant="Variant.Outlined" Required="true" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                
                <MudCardActions Class="justify-start pa-2 pa-sm-4" Style="flex-shrink: 0;">
                    <MudButton OnClick="CloseAddStockModal" Variant="Variant.Text" Class="mr-2" Disabled="@_isSaving">Cancel</MudButton>
                    <MudButton OnClick="SaveAddStock" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_isSaving">
                        @if (_isSaving)
                        {
                            <MudProgressCircular Size="Size.Small" Color="Color.Inherit" Indeterminate="true" />
                        }
                        else
                        {
                            <span>Add Stock</span>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudOverlay>
    }

    <!-- Filter Modal -->
    @if (_isFilterModalOpen)
    {
        <MudOverlay Visible="true" DarkBackground="true" ZIndex="1000">
            <MudCard Style="width: 95%; max-width: 500px; height: 85vh; margin: 0 auto; display: flex; flex-direction: column;" Class="pa-2 pa-sm-4">
                <MudCardHeader Style="position: relative; flex-shrink: 0;" Class="pa-2 pa-sm-4">
                    <MudText Typo="Typo.h6">Filter Products</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                  OnClick="CloseFilterModal" 
                                  Size="Size.Small" 
                                  Color="Color.Inherit"
                                  Style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%);" />
                </MudCardHeader>
                
                <MudCardContent Class="pa-2 pa-sm-4" Style="flex: 1; overflow-y: auto;">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle1" Class="mb-2">Sort By</MudText>
                            <MudSelect ShrinkLabel @bind-Value="_tempSortOrder" Label="Sort Order" Variant="Variant.Outlined" FullWidth="true">
                                <MudSelectItem Value="@("name_asc")">Name Ascending</MudSelectItem>
                                <MudSelectItem Value="@("name_desc")">Name Descending</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        
                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle1" Class="mb-2">Category</MudText>
                            <MudAutocomplete T="string" @bind-Value="_tempSelectedCategory" Label="Select Category" Variant="Variant.Outlined" FullWidth="true"
                                             SearchFunc="SearchFilterCategories" ToStringFunc="@(category => category)" 
                                             AllowCustomValue="true"
                                             MaxItems="10" />
                        </MudItem>
                        

                    </MudGrid>
                </MudCardContent>
                
                <MudCardActions Class="justify-start pa-2 pa-sm-4" Style="flex-shrink: 0;">
                                         <MudButton OnClick="CloseFilterModal" Variant="Variant.Text" Class="mr-2">Cancel</MudButton>
                     <MudButton OnClick="ApplyFilters" Variant="Variant.Filled" Color="Color.Primary">Apply Filters</MudButton>
                </MudCardActions>
            </MudCard>
        </MudOverlay>
    }
    
    <!-- Custom Delete Confirmation Modal -->
    @if (_isDeleteConfirmationOpen)
    {
        <MudOverlay Visible="true" DarkBackground="true" ZIndex="1000">
            <MudCard Style="width: 95%; max-width: 400px; margin: 0 auto; display: flex; flex-direction: column;" Class="pa-2 pa-sm-4">
                <MudCardHeader Style="position: relative; flex-shrink: 0;" Class="pa-2 pa-sm-4">
                    <MudText Typo="Typo.h6">Confirm Delete</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                  OnClick="CancelDelete" 
                                  Size="Size.Small" 
                                  Color="Color.Inherit"
                                  Style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%);" />
                </MudCardHeader>
                
                <MudCardContent Class="pa-2 pa-sm-4">
                    <div class="text-center mb-4">
                        <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Large" Color="Color.Warning" Class="mb-3" />
                        <MudText Typo="Typo.body1" Class="mb-3">
                            Are you sure you want to delete the product "<strong>@_deleteConfirmationProductName</strong>"?
                        </MudText>
                        <MudText Typo="Typo.body2" Color="Color.Warning">
                            This action cannot be undone.
                        </MudText>
                    </div>
                </MudCardContent>
                
                <MudCardActions Class="justify-start pa-2 pa-sm-4" Style="flex-shrink: 0;">
                                         <MudButton OnClick="CancelDelete" 
                               Variant="Variant.Text" 
                               Class="mr-2" 
                               Disabled="@_isSaving">
                        Cancel
                    </MudButton>
                                         <MudButton OnClick="ConfirmDelete" 
                               Variant="Variant.Filled" 
                               Color="Color.Error" 
                               Disabled="@_isSaving">
                        @if (_isSaving)
                        {
                            <MudProgressCircular Size="Size.Small" Color="Color.Inherit" Indeterminate="true" />
                        }
                        else
                        {
                            <span>Delete Product</span>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudOverlay>
         }
     
     
 </AuthorizedPageBase>

@code {
    private string _searchString = "";
    private bool _isAddProductDialogOpen;
    private bool _isLoading = true;
    private bool _isSaving;
    private Product _newProduct = new Product();
    private List<Product> _products = [];
    private bool _isFilterModalOpen;
    private string _sortOrder = "name_asc";
    private string _selectedCategory = "";
         private bool _isEditProductDialogOpen;
     private Product _editingProduct;
    private bool _isAddStockDialogOpen;
    private Product _addingStockProduct;
    private int _addStockQuantity = 0;
    
    // Separate filter state for the modal
    private string _tempSearchString = "";
    private string _tempSortOrder = "name_asc";
    private string _tempSelectedCategory = "";

    private string _deleteConfirmationProductName = "";
    private bool _isDeleteConfirmationOpen = false;
    private TaskCompletionSource<bool> _deleteConfirmationTcs = null;
    


    public OpeningInventory() {
        _isAddProductDialogOpen = false;
    }

    override protected async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            await InvokeAsync(() => _isLoading = true);
            
            _products = await FirebaseService.GetProductsAsync();
        }
        catch (Exception ex)
        {
            await InvokeAsync(() => ShowCenteredNotification($"Error loading products: {ex.Message}", Severity.Error));
        }
        finally
        {
            await InvokeAsync(() => 
            {
                _isLoading = false;
                StateHasChanged();
            });
        }
    }

    private void ClearCache()
    {
        // No caching implemented
    }

    private List<Product> FilteredProducts
    {
        get
        {
                         var filtered = _products.Where(product => 
                 (string.IsNullOrEmpty(_searchString) || 
                  product.Name.ToLower().Contains(_searchString.ToLower()) ||
                  product.Category.ToLower().Contains(_searchString.ToLower())) &&
                 (string.IsNullOrEmpty(_selectedCategory) || product.Category == _selectedCategory));

            return _sortOrder switch
            {
                "name_asc" => filtered.OrderBy(p => p.Name).ToList(),
                "name_desc" => filtered.OrderByDescending(p => p.Name).ToList(),
                _ => filtered.OrderBy(p => p.Name).ToList()
            };
        }
    }

    private void ViewProduct(Product product)
    {
        ShowCenteredNotification($"Viewing product: {product.Name}", Severity.Info);
    }

    private void EditProduct(Product product)
    {
        // Create a copy of the product to avoid modifying the original until saved
                 _editingProduct = new Product
         {
             Id = product.Id,
             Name = product.Name,
             Category = product.Category,
                          Stock = (UserState.Role == "opening" || UserState.Role == "admin") ? product.OpeningInventoryQuantity : product.Stock, // Show OpeningInventoryQuantity for opening users and admins
             LowStockThreshold = product.LowStockThreshold,
             Price = product.Price,
             Status = product.Status,
             StatusColor = product.StatusColor,
             CreatedAt = product.CreatedAt,
             OpeningAddedStock = product.OpeningAddedStock,
             TodayAddedStock = product.TodayAddedStock,
             LastStockUpdateDate = product.LastStockUpdateDate,
             OpeningInventoryQuantity = product.OpeningInventoryQuantity,
             OpeningInventorySetBy = product.OpeningInventorySetBy
         };
        _isEditProductDialogOpen = true;
    }

    private void AddStockProduct(Product product)
    {
        _addingStockProduct = new Product
        {
            Id = product.Id,
            Name = product.Name,
            Category = product.Category,
            Stock = product.Stock,
            LowStockThreshold = product.LowStockThreshold,
            Price = product.Price,
            Status = product.Status,
            StatusColor = product.StatusColor,
            CreatedAt = product.CreatedAt,
            OpeningAddedStock = product.OpeningAddedStock,
            TodayAddedStock = product.TodayAddedStock,
            LastStockUpdateDate = product.LastStockUpdateDate
        };
        _addStockQuantity = 0;
        _isAddStockDialogOpen = true;
    }

    private async Task DeleteProduct(Product product)
    {
        try
        {
            var confirmed = await ShowDeleteConfirmation(product.Name);
            if (confirmed)
            {
                var success = await FirebaseService.DeleteProductWithActivityAsync(product);
                if (success)
                {
                    // Clear cache to force fresh data load
                    ClearCache();
                    await LoadProducts();
                    ShowCenteredNotification($"Product '{product.Name}' deleted successfully", Severity.Success);
                }
                else
                {
                    ShowCenteredNotification($"Failed to delete product '{product.Name}'", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            ShowCenteredNotification($"Error deleting product: {ex.Message}", Severity.Error);
        }
    }

    private async Task<bool> ShowDeleteConfirmation(string productName)
    {
        _deleteConfirmationProductName = productName;
        _isDeleteConfirmationOpen = true;
        StateHasChanged();
        
        // Wait for user response
        var tcs = new TaskCompletionSource<bool>();
        _deleteConfirmationTcs = tcs;
        return await tcs.Task;
    }

    private void ConfirmDelete()
    {
        _isDeleteConfirmationOpen = false;
        _deleteConfirmationTcs?.SetResult(true);
        StateHasChanged();
    }

         private void CancelDelete()
     {
         _isDeleteConfirmationOpen = false;
         _deleteConfirmationTcs?.SetResult(false);
         StateHasChanged();
     }
     


    private void OpenAddProductDialog()
    {
        _newProduct = new Product();
        _isAddProductDialogOpen = true;
    }

    private void CloseModal()
    {
        _isAddProductDialogOpen = false;
        StateHasChanged();
    }

    private async Task SaveProduct()
    {
        if (string.IsNullOrEmpty(_newProduct.Name) || string.IsNullOrEmpty(_newProduct.Category))
        {
            ShowCenteredNotification("Please fill in all required fields", Severity.Warning);
            return;
        }

        try
        {
            _isSaving = true;
            StateHasChanged();

            // Check if product name already exists
            var productExists = await FirebaseService.CheckProductNameExistsAsync(_newProduct.Name);
            if (productExists)
            {
                ShowCenteredNotification($"A product with the name '{_newProduct.Name}' already exists. Please choose a different name.", Severity.Warning);
                return;
            }



            var success = await FirebaseService.CreateProductWithActivityAsync(_newProduct);
            if (success)
            {
                // Refresh data
                ClearCache();
                await LoadProducts();
                _isAddProductDialogOpen = false;
                ShowCenteredNotification($"Product '{_newProduct.Name}' added successfully", Severity.Success);
            }
            else
            {
                ShowCenteredNotification($"Failed to add product '{_newProduct.Name}'", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            ShowCenteredNotification($"Error saving product: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private void CloseEditModal()
    {
        _isEditProductDialogOpen = false;
        StateHasChanged();
    }

    private void CloseAddStockModal()
    {
        _isAddStockDialogOpen = false;
        StateHasChanged();
    }

    private async Task SaveAddStock()
    {
        if (_addStockQuantity <= 0)
        {
            ShowCenteredNotification("Please enter a valid quantity to add", Severity.Warning);
            return;
        }

        try
        {
            _isSaving = true;
            StateHasChanged();

            // Get the original product to find the current stock
            var originalProduct = _products.FirstOrDefault(p => p.Id == _addingStockProduct.Id);
            if (originalProduct != null)
            {
                // Add the stock quantity to the existing stock
                var updatedStock = originalProduct.Stock + _addStockQuantity;
                
                // Calculate the new cumulative opening added stock
                var newOpeningAddedStock = originalProduct.OpeningAddedStock + _addStockQuantity;
                
                // Store only the specific stock addition amount, not accumulated
                var todayAddedStock = _addStockQuantity;
                
                // Create a new product object with the updated stock
                var updatedProduct = new Product
                {
                    Id = originalProduct.Id,
                    Name = originalProduct.Name,
                    Category = originalProduct.Category,
                    Stock = updatedStock,
                    LowStockThreshold = originalProduct.LowStockThreshold,
                    Price = originalProduct.Price,
                    Status = GetStatusText(updatedStock, originalProduct.LowStockThreshold),
                    StatusColor = GetStatusColor(updatedStock, originalProduct.LowStockThreshold),
                    CreatedAt = originalProduct.CreatedAt,
                    LastUpdated = DateTime.UtcNow,
                    LastModifiedBy = $"{UserState.CurrentUser?.Username ?? ""} (opening)",
                    OpeningAddedStock = newOpeningAddedStock,
                    TodayAddedStock = todayAddedStock,
                    LastStockUpdateDate = DateTime.UtcNow.AddHours(8) // Philippine time
                };

                var success = await FirebaseService.UpdateProductStockAsync(originalProduct.Id.ToString(), updatedStock, newOpeningAddedStock, todayAddedStock, $"{UserState.CurrentUser?.Username ?? ""} (opening)");
                if (success)
                {
                    // Check for low stock conditions and create activities
                    await FirebaseService.CheckLowStockAndCreateActivityAsync(updatedProduct);
                    
                    // Find and update the original product in the list
                    var index = _products.FindIndex(p => p.Id == updatedProduct.Id);
                    if (index != -1)
                    {
                        _products[index] = updatedProduct;
                    }
                    
                    _isAddStockDialogOpen = false;
                    ShowCenteredNotification($"Added {_addStockQuantity} stock to '{_addingStockProduct.Name}' successfully", Severity.Success);
                    
                    // Clear cache to force fresh data load
                    ClearCache();
                    await LoadProducts();
                }
                else
                {
                    ShowCenteredNotification($"Failed to add stock to '{_addingStockProduct.Name}'", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            ShowCenteredNotification($"Error adding stock: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private async Task UpdateProduct()
    {
        if (string.IsNullOrEmpty(_editingProduct.Name) || string.IsNullOrEmpty(_editingProduct.Category))
        {
            ShowCenteredNotification("Please fill in all required fields", Severity.Warning);
            return;
        }

        try
        {
            _isSaving = true;
            StateHasChanged();

            // Check if product name already exists (excluding the current product being edited)
            var productExists = await FirebaseService.CheckProductNameExistsAsync(_editingProduct.Name, _editingProduct.Id);
            if (productExists)
            {
                ShowCenteredNotification($"A product with the name '{_editingProduct.Name}' already exists. Please choose a different name.", Severity.Warning);
                return;
            }

                                      // For opening users and admins, set the opening inventory quantity and username
             if (UserState.Role == "opening" || UserState.Role == "admin")
             {
                 // Get the original product to find the current stock
                 var originalProduct = _products.FirstOrDefault(p => p.Id == _editingProduct.Id);
                 if (originalProduct != null)
                 {
                     // Set the opening inventory quantity (this holds the quantity, doesn't affect total stock)
                     _editingProduct.OpeningInventoryQuantity = _editingProduct.Stock;
                     _editingProduct.OpeningInventorySetBy = UserState.CurrentUser?.Username ?? "";
                     
                     // DO NOT update TodayAddedStock - opening inventory setting should not affect Today Added
                     // Keep TodayAddedStock unchanged from the original product
                     _editingProduct.TodayAddedStock = originalProduct.TodayAddedStock;
                     _editingProduct.LastStockUpdateDate = originalProduct.LastStockUpdateDate;
                     
                     // Keep the original stock unchanged - opening inventory doesn't affect total stock yet
                     _editingProduct.Stock = originalProduct.Stock;
                 }
             }

                         // Update the regular status for the Products page
             _editingProduct.Status = GetStatusText(_editingProduct.Stock, _editingProduct.LowStockThreshold);
             _editingProduct.StatusColor = GetStatusColor(_editingProduct.Stock, _editingProduct.LowStockThreshold);
             
             // Set the last updated timestamp
             _editingProduct.LastUpdated = DateTime.UtcNow;

            var success = await FirebaseService.UpdateProductAsync(_editingProduct, UserState.CurrentUser?.Username ?? "");
            if (success)
            {
                // Check for low stock conditions and create activities
                await FirebaseService.CheckLowStockAndCreateActivityAsync(_editingProduct);
                
                                                  // Find and update the original product in the list
                  var originalProduct = _products.FirstOrDefault(p => p.Id == _editingProduct.Id);
                  if (originalProduct != null)
                  {
                      originalProduct.Name = _editingProduct.Name;
                      originalProduct.Category = _editingProduct.Category;
                      originalProduct.Stock = _editingProduct.Stock;
                      originalProduct.LowStockThreshold = _editingProduct.LowStockThreshold;
                      originalProduct.Price = _editingProduct.Price;
                      originalProduct.Status = _editingProduct.Status;
                      originalProduct.StatusColor = _editingProduct.StatusColor;
                      originalProduct.LastUpdated = _editingProduct.LastUpdated;
                      
                      // Preserve TodayAddedStock - opening inventory setting should not affect Today Added
                      originalProduct.TodayAddedStock = _editingProduct.TodayAddedStock;
                      originalProduct.LastStockUpdateDate = _editingProduct.LastStockUpdateDate;
                      
                      // Update opening inventory fields for opening/admin roles
                      if (UserState.Role == "opening" || UserState.Role == "admin")
                      {
                          originalProduct.OpeningInventoryQuantity = _editingProduct.OpeningInventoryQuantity;
                          originalProduct.OpeningInventorySetBy = _editingProduct.OpeningInventorySetBy;
                      }
                  }
                
                                _isEditProductDialogOpen = false;
                ShowCenteredNotification($"Product '{_editingProduct.Name}' {((UserState.Role == "opening" || UserState.Role == "admin") ? "opening inventory set" : "updated")} successfully", Severity.Success);
                
                // Refresh data
                ClearCache();
                await LoadProducts();
            }
            else
            {
                                 ShowCenteredNotification($"Failed to {((UserState.Role == "opening" || UserState.Role == "admin") ? "set opening inventory for" : "update")} product '{_editingProduct.Name}'", Severity.Error);
            }
        }
        catch (Exception ex)
        {
                         ShowCenteredNotification($"Error {((UserState.Role == "opening" || UserState.Role == "admin") ? "setting opening inventory" : "updating product")}: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private void ShowCenteredNotification(string message, Severity severity)
    {
        Snackbar.Add(message, severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.VisibleStateDuration = 3000;
        });
    }

    private void OpenFilterModal()
    {
        // Initialize temp values with current filter values
        _tempSearchString = _searchString;
        _tempSortOrder = _sortOrder;
        _tempSelectedCategory = _selectedCategory;
        _isFilterModalOpen = true;
        StateHasChanged();
    }

    private void CloseFilterModal()
    {
        _isFilterModalOpen = false;
        StateHasChanged();
    }

    private void ClearAllFilters()
    {
        // Clear all actual filter values immediately
        _searchString = "";
        _selectedCategory = "";
        _sortOrder = "name_asc";
        
        ShowCenteredNotification("All filters cleared", Severity.Info);
        StateHasChanged();
    }

    private void ApplyFilters()
    {
        // Apply the temporary filter values to the actual filter values
        _searchString = _tempSearchString;
        _sortOrder = _tempSortOrder;
        _selectedCategory = _tempSelectedCategory;
        CloseFilterModal();
        ShowCenteredNotification("Filters applied successfully", Severity.Success);
    }

    private List<string> AvailableCategories => _products.Select(p => p.Category).Distinct().ToList();

    private async Task<IEnumerable<string>> SearchCategories(string value, CancellationToken cancellationToken)
    {
        // If no search value, return all categories
        if (string.IsNullOrEmpty(value))
            return AvailableCategories;

        // Get matching categories
        var matchingCategories = AvailableCategories
            .Where(category => category.Contains(value, StringComparison.OrdinalIgnoreCase))
            .ToList();

        // If the typed value is not in the list and it's not empty, add it as a custom option
        if (!string.IsNullOrEmpty(value) && !matchingCategories.Contains(value))
        {
            matchingCategories.Add(value);
        }

        return matchingCategories;
    }

    private async Task<IEnumerable<string>> SearchFilterCategories(string value, CancellationToken cancellationToken)
    {
        // If no search value, return all categories plus "All Categories" option
        if (string.IsNullOrEmpty(value))
        {
            var allCategories = new List<string> { "" }; // Empty string represents "All Categories"
            allCategories.AddRange(AvailableCategories);
            return allCategories;
        }

        // Get matching categories
        var matchingCategories = AvailableCategories
            .Where(category => category.Contains(value, StringComparison.OrdinalIgnoreCase))
            .ToList();

        // If the typed value is not in the list and it's not empty, add it as a custom option
        if (!string.IsNullOrEmpty(value) && !matchingCategories.Contains(value))
        {
            matchingCategories.Add(value);
        }

        return matchingCategories;
    }



     // Helper methods for regular stock status calculation (for other pages)
     private string GetStatusText(int stock, int threshold)
     {
         if (stock == 0)
             return "Out of stock";
         else if (stock <= threshold)
             return "Low stock";
         else
             return "In stock";
     }

     private Color GetStatusColor(int stock, int threshold)
     {
         if (stock == 0)
             return Color.Error;
         else if (stock <= threshold)
             return Color.Warning;
         else
             return Color.Success;
     }

                       private string GetFormattedLastModified(Product product)
       {
           if (product.LastUpdated.HasValue && !string.IsNullOrEmpty(product.LastModifiedBy))
           {
               var timeAgo = GetTimeAgo(product.LastUpdated.Value);
               
               // Strip the "(opening)" or "(products)" suffix from the display
               var displayUsername = product.LastModifiedBy ?? "";
               
               // Remove only the specific suffix patterns, not the entire word
               displayUsername = displayUsername
                   .Replace(" (opening)", "")
                   .Replace(" (products)", "")
                   .Replace(" (product)", "")
                   .Replace("()", "")
                   .Replace("  ", " ") // Replace double spaces with single space
                   .Trim();
               
               // Ensure we have a valid username
               if (string.IsNullOrWhiteSpace(displayUsername))
               {
                   displayUsername = "Unknown";
               }
               
               // Format: username | minutes ago (for Opening Inventory page)
               return $"{displayUsername} | {timeAgo}";
           }
           
           return "-";
       }

     private string GetTimeAgo(DateTime timestamp)
     {
         var philippineTime = DateTime.UtcNow.AddHours(8);
         var timeSpan = philippineTime - timestamp;
         
         if (timeSpan.TotalDays >= 365)
         {
             var years = (int)(timeSpan.TotalDays / 365);
             return $"{years} year{(years == 1 ? "" : "s")} ago";
         }
         else if (timeSpan.TotalDays >= 30)
         {
             var months = (int)(timeSpan.TotalDays / 30);
             return $"{months} month{(months == 1 ? "" : "s")} ago";
         }
         else if (timeSpan.TotalDays >= 1)
         {
             var days = (int)timeSpan.TotalDays;
             return $"{days} day{(days == 1 ? "" : "s")} ago";
         }
         else if (timeSpan.TotalHours >= 1)
         {
             var hours = (int)timeSpan.TotalHours;
             return $"{hours} hour{(hours == 1 ? "" : "s")} ago";
         }
         else if (timeSpan.TotalMinutes >= 1)
         {
             var minutes = (int)timeSpan.TotalMinutes;
             return $"{minutes} minute{(minutes == 1 ? "" : "s")} ago";
         }
         else
         {
             return "Just now";
         }
     }


}