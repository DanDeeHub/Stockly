@page "/Products"
@using Stockly.Services
@inject FirebaseService FirebaseService
@inject ISnackbar Snackbar

<PageTitle>Products</PageTitle>

<AuthorizedPageBase PageName="Products">
    <div class="pa-2 pa-sm-4">
        <!-- Header with Buttons -->
        <div class="d-flex flex-column flex-sm-row justify-space-between align-start align-sm-center mb-3 mb-sm-6">
            <MudText Typo="Typo.h4" Class="mb-2 mb-sm-0">Products</MudText>
            
            <div class="d-flex gap-1 gap-sm-2 flex-wrap">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Upload" Size="Size.Small" Style="height: 40px; min-width: 80px; max-width: 120px;">Import</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Download" Size="Size.Small" Style="height: 40px; min-width: 80px; max-width: 120px;">Export</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Style="height: 40px; min-width: 100px; max-width: 140px;" OnClick="OpenAddProductDialog">Add Product</MudButton>
            </div>
        </div>
        
        <!-- Search and Filter Section -->
        <MudCard Elevation="0" Class="mb-3 mb-sm-4">
            <MudCardContent Class="pa-2 pa-sm-4">
                <MudGrid>
                    <MudItem xs="12" sm="6" md="9">
                        <MudTextField @bind-Value="_searchString" Placeholder="Search products or categories..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" Variant="Variant.Outlined" Style="height: 40px;" />
                    </MudItem>
                    
                    <MudItem xs="12" sm="6" md="3">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FilterList" Size="Size.Small" Style="height: 40px;" FullWidth="true" OnClick="OpenFilterModal">Filter</MudButton>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
        
        <!-- Loading State -->
        @if (_isLoading)
        {
            <MudCard Elevation="0">
                <MudCardContent Class="pa-4 text-center">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    <MudText Class="mt-2">Loading products...</MudText>
                </MudCardContent>
            </MudCard>
        }
        else
        {
            <!-- Products Table -->
            <MudCard Elevation="0">
                <MudCardContent Class="pa-2 pa-sm-4">
                    @if (FilteredProducts.Any())
                    {
                        <MudTable Items="@FilteredProducts" Dense="true" Hover="true" Striped="true" Breakpoint="Breakpoint.Sm">
                            <HeaderContent>
                                <MudTh>Product Name</MudTh>
                                <MudTh>Category</MudTh>
                                <MudTh>Stock</MudTh>
                                <MudTh>Status</MudTh>
                                <MudTh>Price</MudTh>
                                <MudTh>Last Updated</MudTh>
                                <MudTh>Action</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.Name</MudTd>
                                <MudTd>@context.Category</MudTd>
                                <MudTd>@context.Stock</MudTd>
                                <MudTd><MudText Color="@context.StatusColor" Typo="Typo.body2">@context.Status</MudText></MudTd>
                                <MudTd>₱@context.Price.ToString("N0")</MudTd>
                                <MudTd>@context.CreatedAt.ToString("MM/dd/yy")</MudTd>
                                <MudTd>
                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                                        <MudMenuItem OnClick="@(() => EditProduct(context))"><MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" />Edit</MudMenuItem>
                                        <MudMenuItem OnClick="@(() => DeleteProduct(context))"><MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-2" />Delete</MudMenuItem>
                                    </MudMenu>
                                </MudTd>
                            </RowTemplate>
                            <PagerContent><MudTablePager /></PagerContent>
                        </MudTable>
                    }
                    else
                    {
                        <div class="text-center pa-4">
                            <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" Color="Color.Primary" />
                            <MudText Typo="Typo.h6" Class="mt-2">No products found</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Add your first product to get started</MudText>
                        </div>
                    }
                </MudCardContent>
            </MudCard>
        }
    </div>
    
    <!-- Add Product Modal -->
    @if (_isAddProductDialogOpen)
    {
        <MudOverlay Visible="true" DarkBackground="true" ZIndex="1000">
            <MudCard Style="width: 95%; max-width: 400px; max-height: 85vh; overflow-y: auto; margin: 0 auto;" Class="pa-2 pa-sm-4">
                <MudCardHeader Style="position: relative;" Class="pa-2 pa-sm-4">
                    <MudText Typo="Typo.h6">Add New Product</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                  OnClick="CloseModal" 
                                  Size="Size.Small" 
                                  Color="Color.Inherit"
                                  Style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%);" />
                </MudCardHeader>
                
                <MudCardContent Class="pa-2 pa-sm-4">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="_newProduct.Name" Label="Product Name" Variant="Variant.Outlined" Required="true" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="_newProduct.Category" Label="Category" Variant="Variant.Outlined" Required="true" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudNumericField @bind-Value="_newProduct.Stock" Label="Stock Quantity" Variant="Variant.Outlined" Required="true" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudNumericField @bind-Value="_newProduct.Price" Label="Price" Variant="Variant.Outlined" Required="true" Adornment="Adornment.Start" AdornmentText="₱" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudSelect @bind-Value="_newProduct.Status" Label="Status" Variant="Variant.Outlined" Required="true">
                                <MudSelectItem Value="@("In stock")">In Stock</MudSelectItem>
                                <MudSelectItem Value="@("Low stock")">Low Stock</MudSelectItem>
                                <MudSelectItem Value="@("Out of stock")">Out of Stock</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                
                <MudCardActions Class="justify-start pa-2 pa-sm-4">
                    <MudButton OnClick="CloseModal" Variant="Variant.Text" Class="mr-2" Disabled="@_isSaving">Cancel</MudButton>
                    <MudButton OnClick="SaveProduct" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_isSaving">
                        @if (_isSaving)
                        {
                            <MudProgressCircular Size="Size.Small" Color="Color.Inherit" Indeterminate="true" />
                        }
                        else
                        {
                            <span>Save Product</span>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudOverlay>
    }

    <!-- Edit Product Modal -->
    @if (_isEditProductDialogOpen)
    {
        <MudOverlay Visible="true" DarkBackground="true" ZIndex="1000">
            <MudCard Style="width: 95%; max-width: 400px; max-height: 85vh; overflow-y: auto; margin: 0 auto;" Class="pa-2 pa-sm-4">
                <MudCardHeader Style="position: relative;" Class="pa-2 pa-sm-4">
                    <MudText Typo="Typo.h6">Edit Product</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                  OnClick="CloseEditModal" 
                                  Size="Size.Small" 
                                  Color="Color.Inherit"
                                  Style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%);" />
                </MudCardHeader>
                
                <MudCardContent Class="pa-2 pa-sm-4">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="_editingProduct.Name" Label="Product Name" Variant="Variant.Outlined" Required="true" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="_editingProduct.Category" Label="Category" Variant="Variant.Outlined" Required="true" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudNumericField @bind-Value="_editingProduct.Stock" Label="Stock Quantity" Variant="Variant.Outlined" Required="true" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudNumericField @bind-Value="_editingProduct.Price" Label="Price" Variant="Variant.Outlined" Required="true" Adornment="Adornment.Start" AdornmentText="₱" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudSelect @bind-Value="_editingProduct.Status" Label="Status" Variant="Variant.Outlined" Required="true">
                                <MudSelectItem Value="@("In stock")">In Stock</MudSelectItem>
                                <MudSelectItem Value="@("Low stock")">Low Stock</MudSelectItem>
                                <MudSelectItem Value="@("Out of stock")">Out of Stock</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                
                <MudCardActions Class="justify-start pa-2 pa-sm-4">
                    <MudButton OnClick="CloseEditModal" Variant="Variant.Text" Class="mr-2" Disabled="@_isSaving">Cancel</MudButton>
                    <MudButton OnClick="UpdateProduct" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_isSaving">
                        @if (_isSaving)
                        {
                            <MudProgressCircular Size="Size.Small" Color="Color.Inherit" Indeterminate="true" />
                        }
                        else
                        {
                            <span>Update Product</span>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudOverlay>
    }

    <!-- Filter Modal -->
    @if (_isFilterModalOpen)
    {
        <MudOverlay Visible="true" DarkBackground="true" ZIndex="1000">
            <MudCard Style="width: 95%; max-width: 500px; max-height: 85vh; overflow-y: auto; margin: 0 auto;" Class="pa-2 pa-sm-4">
                <MudCardHeader Style="position: relative;" Class="pa-2 pa-sm-4">
                    <MudText Typo="Typo.h6">Filter Products</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                  OnClick="CloseFilterModal" 
                                  Size="Size.Small" 
                                  Color="Color.Inherit"
                                  Style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%);" />
                </MudCardHeader>
                
                <MudCardContent Class="pa-2 pa-sm-4">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle1" Class="mb-2">Sort By</MudText>
                            <MudSelect ShrinkLabel @bind-Value="_sortOrder" Label="Sort Order" Variant="Variant.Outlined" FullWidth="true">
                                <MudSelectItem Value="@("name_asc")">Name Ascending</MudSelectItem>
                                <MudSelectItem Value="@("name_desc")">Name Descending</MudSelectItem>
                                <MudSelectItem Value="@("price_asc")">Price Low to High</MudSelectItem>
                                <MudSelectItem Value="@("price_desc")">Price High to Low</MudSelectItem>
                                <MudSelectItem Value="@("stock_asc")">Stock Low to High</MudSelectItem>
                                <MudSelectItem Value="@("stock_desc")">Stock High to Low</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        
                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle1" Class="mb-2">Category</MudText>
                            <MudSelect ShrinkLabel @bind-Value="_selectedCategory" Label="Select Category" Variant="Variant.Outlined" FullWidth="true">
                                <MudSelectItem Value="@("")">All Categories</MudSelectItem>
                                @foreach (var category in AvailableCategories)
                                {
                                    <MudSelectItem Value="@category">@category</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        
                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle1" Class="mb-2">Stock Status</MudText>
                            <MudSelect ShrinkLabel @bind-Value="_selectedStatus" Label="Select Status" Variant="Variant.Outlined" FullWidth="true">
                                <MudSelectItem Value="@("")">All Status</MudSelectItem>
                                <MudSelectItem Value="@("In stock")">In Stock</MudSelectItem>
                                <MudSelectItem Value="@("Low stock")">Low Stock</MudSelectItem>
                                <MudSelectItem Value="@("Out of stock")">Out of Stock</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                
                <MudCardActions Class="justify-start pa-2 pa-sm-4">
                    <MudButton OnClick="ClearFilters" Variant="Variant.Text" Class="mr-2">Clear All</MudButton>
                    <MudButton OnClick="CloseFilterModal" Variant="Variant.Text" Class="mr-2">Cancel</MudButton>
                    <MudButton OnClick="ApplyFilters" Variant="Variant.Filled" Color="Color.Primary">Apply Filters</MudButton>
                </MudCardActions>
            </MudCard>
        </MudOverlay>
    }
</AuthorizedPageBase>

@code {
    private string _searchString = "";
    private bool _isAddProductDialogOpen;
    private bool _isLoading = true;
    private bool _isSaving;
    private Product _newProduct = new Product();
    private List<Product> _products = [];
    private bool _isFilterModalOpen;
    private string _sortOrder = "name_asc";
    private string _selectedCategory = "";
    private string _selectedStatus = "";
    private bool _isEditProductDialogOpen;
    private Product _editingProduct;

    public Products() {
        _isAddProductDialogOpen = false;
    }

    override protected async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            _isLoading = true;
            
            // Test Firebase connection first
            var connectionTest = await FirebaseService.TestConnectionAsync();
            if (!connectionTest)
            {
                ShowCenteredNotification("Failed to connect to Firebase. Please check your credentials.", Severity.Error);
                return;
            }
            
            _products = await FirebaseService.GetProductsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoadProducts: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            ShowCenteredNotification($"Error loading products: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private List<Product> FilteredProducts
    {
        get
        {
            var filtered = _products.Where(product => 
                (string.IsNullOrEmpty(_searchString) || 
                 product.Name.ToLower().Contains(_searchString.ToLower()) ||
                 product.Category.ToLower().Contains(_searchString.ToLower())) &&
                (string.IsNullOrEmpty(_selectedCategory) || product.Category == _selectedCategory) &&
                (string.IsNullOrEmpty(_selectedStatus) || product.Status == _selectedStatus));

            return _sortOrder switch
            {
                "name_asc" => filtered.OrderBy(p => p.Name).ToList(),
                "name_desc" => filtered.OrderByDescending(p => p.Name).ToList(),
                "price_asc" => filtered.OrderBy(p => p.Price).ToList(),
                "price_desc" => filtered.OrderByDescending(p => p.Price).ToList(),
                "stock_asc" => filtered.OrderBy(p => p.Stock).ToList(),
                "stock_desc" => filtered.OrderByDescending(p => p.Stock).ToList(),
                _ => filtered.OrderBy(p => p.Name).ToList()
            };
        }
    }

    private void ViewProduct(Product product)
    {
        // TODO: Implement view product functionality
        ShowCenteredNotification($"Viewing product: {product.Name}", Severity.Info);
    }

    private void EditProduct(Product product)
    {
        _editingProduct = product;
        _isEditProductDialogOpen = true;
    }

    private async Task DeleteProduct(Product product)
    {
        try
        {
            var confirmed = await ShowDeleteConfirmation(product.Name);
            if (confirmed)
            {
                var success = await FirebaseService.DeleteProductAsync(product.Id);
                if (success)
                {
                    _products.Remove(product);
                    ShowCenteredNotification($"Product '{product.Name}' deleted successfully", Severity.Success);
                    StateHasChanged();
                }
                else
                {
                    ShowCenteredNotification($"Failed to delete product '{product.Name}'", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            ShowCenteredNotification($"Error deleting product: {ex.Message}", Severity.Error);
        }
    }

    private Task<bool> ShowDeleteConfirmation(string productName)
    {
        // For now, return true. In a real app, you'd show a confirmation dialog
        return Task.FromResult(true);
    }

    private void OpenAddProductDialog()
    {
        _newProduct = new Product();
        _isAddProductDialogOpen = true;
    }

    private void CloseModal()
    {
        _isAddProductDialogOpen = false;
        StateHasChanged();
    }

    private async Task SaveProduct()
    {
        if (string.IsNullOrEmpty(_newProduct.Name) || string.IsNullOrEmpty(_newProduct.Category))
        {
            ShowCenteredNotification("Please fill in all required fields", Severity.Warning);
            return;
        }

        try
        {
            _isSaving = true;
            StateHasChanged();

            // Set status color based on status
            _newProduct.StatusColor = _newProduct.Status switch
            {
                "In stock" => Color.Success,
                "Low stock" => Color.Warning,
                "Out of stock" => Color.Error,
                _ => Color.Default
            };

            var success = await FirebaseService.CreateProductAsync(_newProduct);
            if (success)
            {
                // Reload products to get the new product with its ID
                await LoadProducts();
                _isAddProductDialogOpen = false;
                ShowCenteredNotification($"Product '{_newProduct.Name}' added successfully", Severity.Success);
            }
            else
            {
                ShowCenteredNotification($"Failed to add product '{_newProduct.Name}'", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            ShowCenteredNotification($"Error saving product: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private void CloseEditModal()
    {
        _isEditProductDialogOpen = false;
        StateHasChanged();
    }

    private async Task UpdateProduct()
    {
        if (string.IsNullOrEmpty(_editingProduct.Name) || string.IsNullOrEmpty(_editingProduct.Category))
        {
            ShowCenteredNotification("Please fill in all required fields", Severity.Warning);
            return;
        }

        try
        {
            _isSaving = true;
            StateHasChanged();

            // Set status color based on status
            _editingProduct.StatusColor = _editingProduct.Status switch
            {
                "In stock" => Color.Success,
                "Low stock" => Color.Warning,
                "Out of stock" => Color.Error,
                _ => Color.Default
            };

            var success = await FirebaseService.UpdateProductAsync(_editingProduct);
            if (success)
            {
                await LoadProducts();
                _isEditProductDialogOpen = false;
                ShowCenteredNotification($"Product '{_editingProduct.Name}' updated successfully", Severity.Success);
            }
            else
            {
                ShowCenteredNotification($"Failed to update product '{_editingProduct.Name}'", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            ShowCenteredNotification($"Error updating product: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private void ShowCenteredNotification(string message, Severity severity)
    {
        Snackbar.Add(message, severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.VisibleStateDuration = 3000;
        });
    }

    private void OpenFilterModal()
    {
        _isFilterModalOpen = true;
        StateHasChanged();
    }

    private void CloseFilterModal()
    {
        _isFilterModalOpen = false;
        StateHasChanged();
    }

    private void ClearFilters()
    {
        _searchString = "";
        _selectedCategory = "";
        _selectedStatus = "";
        _sortOrder = "name_asc";
        StateHasChanged();
    }

    private void ApplyFilters()
    {
        CloseFilterModal();
        ShowCenteredNotification("Filters applied successfully", Severity.Success);
    }

    private List<string> AvailableCategories => _products.Select(p => p.Category).Distinct().ToList();
}
