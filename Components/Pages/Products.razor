@page "/Products"
@using Stockly.Services
@inject FirebaseService FirebaseService
@inject ISnackbar Snackbar

<PageTitle>Products</PageTitle>

<AuthorizedPageBase PageName="Products">
    <div class="pa-2 pa-sm-4">
        <!-- Header with Buttons -->
        <div class="d-flex flex-column flex-sm-row justify-space-between align-start align-sm-center mb-3 mb-sm-6">
            <MudText Typo="Typo.h4" Class="mb-2 mb-sm-0">Products</MudText>
            
            <div class="d-flex gap-1 gap-sm-2 flex-wrap">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Upload" Size="Size.Small" Style="height: 40px; min-width: 80px; max-width: 120px;">Import</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Download" Size="Size.Small" Style="height: 40px; min-width: 80px; max-width: 120px;">Export</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Style="height: 40px; min-width: 100px; max-width: 140px;" OnClick="OpenAddProductDialog">Add Product</MudButton>
            </div>
        </div>
        
        <!-- Search and Filter Section -->
        <MudCard Elevation="0" Class="mb-3 mb-sm-4">
            <MudCardContent Class="pa-2 pa-sm-4">
                <MudGrid>
                    <MudItem xs="12" sm="6" md="9">
                        <MudTextField @bind-Value="searchString" Placeholder="Search products or categories..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" Variant="Variant.Outlined" Size="Size.Small" Style="height: 40px;" />
                    </MudItem>
                    
                    <MudItem xs="12" sm="6" md="3">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FilterList" Size="Size.Small" Style="height: 40px;" FullWidth="true">Filter</MudButton>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
        
        <!-- Loading State -->
        @if (isLoading)
        {
            <MudCard Elevation="0">
                <MudCardContent Class="pa-4 text-center">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    <MudText Class="mt-2">Loading products...</MudText>
                </MudCardContent>
            </MudCard>
        }
        else
        {
            <!-- Products Table -->
            <MudCard Elevation="0">
                <MudCardContent Class="pa-2 pa-sm-4">
                    @if (FilteredProducts.Any())
                    {
                        <MudTable Items="@FilteredProducts" Dense="true" Hover="true" Striped="true" Breakpoint="Breakpoint.Sm">
                            <HeaderContent>
                                <MudTh>Product Name</MudTh>
                                <MudTh>Category</MudTh>
                                <MudTh>Stock</MudTh>
                                <MudTh>Status</MudTh>
                                <MudTh>Price</MudTh>
                                <MudTh>Last Updated</MudTh>
                                <MudTh>Action</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.Name</MudTd>
                                <MudTd>@context.Category</MudTd>
                                <MudTd>@context.Stock</MudTd>
                                <MudTd><MudText Color="@context.StatusColor" Typo="Typo.body2">@context.Status</MudText></MudTd>
                                <MudTd>₱@context.Price.ToString("N0")</MudTd>
                                <MudTd>@context.CreatedAt.ToString("MM/dd/yy")</MudTd>
                                <MudTd>
                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                                        <MudMenuItem OnClick="@(() => ViewProduct(context))"><MudIcon Icon="@Icons.Material.Filled.Visibility" Class="mr-2" />View Details</MudMenuItem>
                                        <MudMenuItem OnClick="@(() => EditProduct(context))"><MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" />Edit</MudMenuItem>
                                        <MudMenuItem OnClick="@(() => DeleteProduct(context))"><MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-2" />Delete</MudMenuItem>
                                    </MudMenu>
                                </MudTd>
                            </RowTemplate>
                            <PagerContent><MudTablePager /></PagerContent>
                        </MudTable>
                    }
                    else
                    {
                        <div class="text-center pa-4">
                            <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" Color="Color.Primary" />
                            <MudText Typo="Typo.h6" Class="mt-2">No products found</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Add your first product to get started</MudText>
                        </div>
                    }
                </MudCardContent>
            </MudCard>
        }
    </div>
    
    <!-- Add Product Modal -->
    @if (isAddProductDialogOpen)
    {
        <MudOverlay Visible="true" DarkBackground="true" ZIndex="1000">
            <MudCard Style="width: 95%; max-width: 400px; max-height: 85vh; overflow-y: auto; margin: 0 auto;" Class="pa-2 pa-sm-4">
                <MudCardHeader Style="position: relative;" Class="pa-2 pa-sm-4">
                    <MudText Typo="Typo.h6">Add New Product</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                  OnClick="CloseModal" 
                                  Size="Size.Small" 
                                  Color="Color.Inherit"
                                  Style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%);" />
                </MudCardHeader>
                
                <MudCardContent Class="pa-2 pa-sm-4">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="newProduct.Name" Label="Product Name" Variant="Variant.Outlined" Required="true" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="newProduct.Category" Label="Category" Variant="Variant.Outlined" Required="true" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudNumericField @bind-Value="newProduct.Stock" Label="Stock Quantity" Variant="Variant.Outlined" Required="true" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudNumericField @bind-Value="newProduct.Price" Label="Price" Variant="Variant.Outlined" Required="true" Adornment="Adornment.Start" AdornmentText="₱" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudSelect @bind-Value="newProduct.Status" Label="Status" Variant="Variant.Outlined" Required="true">
                                <MudSelectItem Value="@("In stock")">In Stock</MudSelectItem>
                                <MudSelectItem Value="@("Low stock")">Low Stock</MudSelectItem>
                                <MudSelectItem Value="@("Out of stock")">Out of Stock</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                
                <MudCardActions Class="justify-start pa-2 pa-sm-4">
                    <MudButton OnClick="CloseModal" Variant="Variant.Text" Class="mr-2" Disabled="@isSaving">Cancel</MudButton>
                    <MudButton OnClick="SaveProduct" Variant="Variant.Filled" Color="Color.Primary" Disabled="@isSaving">
                        @if (isSaving)
                        {
                            <MudProgressCircular Size="Size.Small" Color="Color.Inherit" Indeterminate="true" />
                        }
                        else
                        {
                            <span>Save Product</span>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudOverlay>
    }
</AuthorizedPageBase>

@code {
    private string searchString = "";
    private bool isAddProductDialogOpen = false;
    private bool isLoading = true;
    private bool isSaving = false;
    private Product newProduct = new();
    private List<Product> products = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            isLoading = true;
            
            // Test Firebase connection first
            var connectionTest = await FirebaseService.TestConnectionAsync();
            if (!connectionTest)
            {
                ShowCenteredNotification("Failed to connect to Firebase. Please check your credentials.", Severity.Error);
                return;
            }
            
            products = await FirebaseService.GetProductsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoadProducts: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            ShowCenteredNotification($"Error loading products: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private List<Product> FilteredProducts => products
        .Where(product => string.IsNullOrEmpty(searchString) || 
                        product.Name.ToLower().Contains(searchString.ToLower()) ||
                        product.Category.ToLower().Contains(searchString.ToLower()))
        .ToList();

    private void ViewProduct(Product product)
    {
        // TODO: Implement view product functionality
        ShowCenteredNotification($"Viewing product: {product.Name}", Severity.Info);
    }

    private void EditProduct(Product product)
    {
        // TODO: Implement edit product functionality
        ShowCenteredNotification($"Editing product: {product.Name}", Severity.Info);
    }

    private async Task DeleteProduct(Product product)
    {
        try
        {
            var confirmed = await ShowDeleteConfirmation(product.Name);
            if (confirmed)
            {
                var success = await FirebaseService.DeleteProductAsync(product.Id);
                if (success)
                {
                    products.Remove(product);
                    ShowCenteredNotification($"Product '{product.Name}' deleted successfully", Severity.Success);
                    StateHasChanged();
                }
                else
                {
                    ShowCenteredNotification($"Failed to delete product '{product.Name}'", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            ShowCenteredNotification($"Error deleting product: {ex.Message}", Severity.Error);
        }
    }

    private Task<bool> ShowDeleteConfirmation(string productName)
    {
        // For now, return true. In a real app, you'd show a confirmation dialog
        return Task.FromResult(true);
    }

    private void OpenAddProductDialog()
    {
        newProduct = new Product();
        isAddProductDialogOpen = true;
    }

    private void CloseModal()
    {
        isAddProductDialogOpen = false;
        StateHasChanged();
    }

    private async Task SaveProduct()
    {
        if (string.IsNullOrEmpty(newProduct.Name) || string.IsNullOrEmpty(newProduct.Category))
        {
            ShowCenteredNotification("Please fill in all required fields", Severity.Warning);
            return;
        }

        try
        {
            isSaving = true;
            StateHasChanged();

            // Set status color based on status
            newProduct.StatusColor = newProduct.Status switch
            {
                "In stock" => Color.Success,
                "Low stock" => Color.Warning,
                "Out of stock" => Color.Error,
                _ => Color.Default
            };

            var success = await FirebaseService.CreateProductAsync(newProduct);
            if (success)
            {
                // Reload products to get the new product with its ID
                await LoadProducts();
                isAddProductDialogOpen = false;
                ShowCenteredNotification($"Product '{newProduct.Name}' added successfully", Severity.Success);
            }
            else
            {
                ShowCenteredNotification($"Failed to add product '{newProduct.Name}'", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            ShowCenteredNotification($"Error saving product: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void ShowCenteredNotification(string message, Severity severity)
    {
        Snackbar.Add(message, severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.VisibleStateDuration = 3000;
        });
    }
}
