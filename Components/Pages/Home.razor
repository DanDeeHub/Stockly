@page "/"
@using Stockly.Services
@inject UserStateService UserState
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject FirebaseService FirebaseService

<PageTitle>Home</PageTitle>

@if (!UserState.IsAuthenticated)
{
    <div class="d-flex justify-center align-center" style="height: 100vh;">
        <MudProgressCircular Size="Size.Large" Indeterminate="true" />
    </div>
}
else
{
    <div class="pa-4">
        <!-- Header -->
        <div class="d-flex justify-space-between align-center mb-6">
            <MudText Typo="Typo.h4">Dashboard</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" 
                          Color="Color.Primary" 
                          Variant="Variant.Outlined"
                          OnClick="RefreshDashboardData"
                          Title="Refresh Dashboard Data" />
        </div>
        
        <!-- Main Metrics Row -->
        <MudGrid Class="mb-6">
            <!-- Left Column: Reminder and Total Asset Value -->
            <MudItem xs="12" md="6">
                <MudGrid>
                    <!-- Reminder Card -->
                    <MudItem xs="12">
                        <MudCard Elevation="0" Class="h-100">
                            <MudCardContent>
                                <MudText Typo="Typo.h6" Class="mb-3">Reminder</MudText>
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Warning" Class="mr-2" />
                                    <MudText Typo="Typo.body1">Monthly inventory audit due in 5 days</MudText>
                                </div>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    
                    <!-- Total Asset Value Card -->
                    <MudItem xs="12">
                        <MudCard Elevation="0" Class="h-100">
                            <MudCardContent>
                                <MudText Typo="Typo.h6" Class="mb-3">Total Asset Value</MudText>
                                <MudText Typo="Typo.h3" Color="Color.Primary" Class="mb-2">₱@TotalAssetValue.ToString("N0")</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Total value of all inventory assets</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudItem>
            
            <!-- Right Column: Product Breakdown Card -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="0" Class="h-100">
                    <MudCardContent>
                                                 <MudText Typo="Typo.h6" Class="mb-3">Product</MudText>
                         <MudText Typo="Typo.h4" Class="mb-4">@TotalProducts</MudText>
                         
                         <!-- Progress Bar for Product Status -->
                         <div class="mb-3">
                             <div class="d-flex justify-space-between align-center mb-2">
                                 <MudText Typo="Typo.body2">In stock: @InStockCount</MudText>
                                 <MudText Typo="Typo.body2" Color="Color.Success">@InStockPercentage%</MudText>
                             </div>
                             <MudProgressLinear Value="@InStockPercentage" Color="Color.Success" Class="mb-3" />
                             
                             <div class="d-flex justify-space-between align-center mb-2">
                                 <MudText Typo="Typo.body2">Low stock: @LowStockCount</MudText>
                                 <MudText Typo="Typo.body2" Color="Color.Warning">@LowStockPercentage%</MudText>
                             </div>
                             <MudProgressLinear Value="@LowStockPercentage" Color="Color.Warning" Class="mb-3" />
                             
                             <div class="d-flex justify-space-between align-center mb-2">
                                 <MudText Typo="Typo.body2">Out of stock: @OutOfStockCount</MudText>
                                 <MudText Typo="Typo.body2" Color="Color.Error">@OutOfStockPercentage%</MudText>
                             </div>
                             <MudProgressLinear Value="@OutOfStockPercentage" Color="Color.Error" />
                         </div>
                        
                        <!-- Additional spacing to match height -->
                        <div style="margin-top: auto;">
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-4">Last updated: @DateTime.Now.ToString("MMM dd, yyyy")</MudText>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
        
        <!-- Recent Activity Section -->
        <MudCard Elevation="0">
            <MudCardHeader>
                <MudText Typo="Typo.h5">Recent Activity</MudText>
            </MudCardHeader>
            <MudCardContent>
                @if (_recentActivities.Any())
                {
                    <div class="d-flex flex-column gap-3">
                        @foreach (var activity in _showAllActivities ? _recentActivities : _recentActivities.Take(4))
                        {
                            <div class="d-flex align-center">
                                <MudAvatar Size="Size.Small" Color="@activity.IconColor" Class="mr-3">
                                    <MudIcon Icon="@activity.Icon" />
                                </MudAvatar>
                                <div>
                                    <MudText Typo="Typo.body1">@activity.Description</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">@GetTimeAgo(activity.Timestamp)</MudText>
                                </div>
                            </div>
                        }
                    </div>
                    
                    @if (_recentActivities.Count > 4)
                    {
                        <div class="d-flex justify-center mt-4">
                            @if (!_showAllActivities)
                            {
                                <MudButton Variant="Variant.Text" 
                                          Color="Color.Primary" 
                                          StartIcon="@Icons.Material.Filled.KeyboardArrowDown"
                                          OnClick="ShowAllActivities"
                                          Size="Size.Small">
                                    See More (@(_recentActivities.Count - 4) more)
                                </MudButton>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Text" 
                                          Color="Color.Primary" 
                                          StartIcon="@Icons.Material.Filled.KeyboardArrowUp"
                                          OnClick="ShowLessActivities"
                                          Size="Size.Small">
                                    Show Less
                                </MudButton>
                            }
                        </div>
                    }
                }
                else
                {
                    <div class="text-center pa-4">
                        <MudIcon Icon="@Icons.Material.Filled.History" Size="Size.Large" Color="Color.Primary" />
                        <MudText Typo="Typo.h6" Class="mt-2">No recent activity</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Activities will appear here as they occur</MudText>
                    </div>
                }
            </MudCardContent>
        </MudCard>
        
        <!-- Quick Actions Section -->
        <MudGrid Class="mt-6">
            <MudItem xs="12">
                <MudCard Elevation="0">
                    <MudCardHeader>
                        <MudText Typo="Typo.h5">Quick Actions</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <div class="d-flex flex-wrap gap-2">
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddProductDialog" Style="flex: 1; min-width: 200px; height: 48px; font-size: 14px; font-weight: 500; text-transform: uppercase; letter-spacing: 0.5px;">Add New Product</MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Info" StartIcon="@Icons.Material.Filled.Inventory" Style="flex: 1; min-width: 200px; height: 48px; font-size: 14px; font-weight: 500; text-transform: uppercase; letter-spacing: 0.5px;">Start Count</MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Warning" Style="flex: 1; min-width: 200px; height: 48px; font-size: 14px; font-weight: 500; text-transform: uppercase; letter-spacing: 0.5px;">Low Stock Report</MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Filled.Remove" OnClick="OpenOutOfStockReport" Style="flex: 1; min-width: 200px; height: 48px; font-size: 14px; font-weight: 500; text-transform: uppercase; letter-spacing: 0.5px;">Out of Stock</MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Success" StartIcon="@Icons.Material.Filled.Download" Style="flex: 1; min-width: 200px; height: 48px; font-size: 14px; font-weight: 500; text-transform: uppercase; letter-spacing: 0.5px;">Export Data</MudButton>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </div>
    
    <!-- Add Product Modal -->
    @if (_isAddProductDialogOpen)
    {
        <MudOverlay Visible="true" DarkBackground="true" ZIndex="1000">
            <MudCard Style="width: 95%; max-width: 400px; height: 85vh; margin: 0 auto; display: flex; flex-direction: column;" Class="pa-2 pa-sm-4">
                <MudCardHeader Style="position: relative; flex-shrink: 0;" Class="pa-2 pa-sm-4">
                    <MudText Typo="Typo.h6">Add New Product</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                  OnClick="CloseModal" 
                                  Size="Size.Small" 
                                  Color="Color.Inherit"
                                  Style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%);" />
                </MudCardHeader>
                
                <MudCardContent Class="pa-2 pa-sm-4" Style="flex: 1; overflow-y: auto;">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="_newProduct.Name" Label="Product Name" Variant="Variant.Outlined" Required="true" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudAutocomplete T="string" @bind-Value="_newProduct.Category" Label="Category" Variant="Variant.Outlined" Required="true" 
                                             SearchFunc="SearchCategories" ToStringFunc="@(category => category)" 
                                             allowCustomValue="true"
                                             MaxItems="5" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudNumericField @bind-Value="_newProduct.Stock" Label="Stock Quantity" Variant="Variant.Outlined" Required="true" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudNumericField @bind-Value="_newProduct.LowStockThreshold" Label="Low Stock Threshold" Variant="Variant.Outlined" Required="true" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudNumericField @bind-Value="_newProduct.Price" Label="Price" Variant="Variant.Outlined" Required="true" Adornment="Adornment.Start" AdornmentText="₱" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                                Status: <MudText Color="@GetStatusColor(_newProduct.Stock, _newProduct.LowStockThreshold)" Typo="Typo.body2">@GetStatusText(_newProduct.Stock, _newProduct.LowStockThreshold)</MudText>
                            </MudText>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                
                <MudCardActions Class="justify-start pa-2 pa-sm-4" Style="flex-shrink: 0;">
                    <MudButton OnClick="CloseModal" Variant="Variant.Text" Class="mr-2" Disabled="@_isSaving">Cancel</MudButton>
                    <MudButton OnClick="SaveProduct" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_isSaving">
                        @if (_isSaving)
                        {
                            <MudProgressCircular Size="Size.Small" Color="Color.Inherit" Indeterminate="true" />
                        }
                        else
                        {
                            <span>Save Product</span>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudOverlay>
    }
}

@code {
    private bool _isAddProductDialogOpen;
    private bool _isSaving;
    private Product _newProduct = new Product();
    private List<Product> _products = [];
    private List<Activity> _recentActivities = [];
    private bool _showAllActivities = false;

    protected override async Task OnInitializedAsync()
    {
        if (!UserState.IsAuthenticated)
        {
            Navigation.NavigateTo("/Login");
        }
        else
        {
            await LoadProducts();
            await LoadRecentActivities();
        }
    }



    private async Task RefreshDashboardData()
    {
        try
        {
            await LoadProducts();
            await LoadRecentActivities();
            ShowCenteredNotification("Dashboard data refreshed successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            ShowCenteredNotification($"Error refreshing dashboard: {ex.Message}", Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task LoadProducts()
    {
        try
        {
            // Test Firebase connection first
            var connectionTest = await FirebaseService.TestConnectionAsync();
            if (!connectionTest)
            {
                ShowCenteredNotification("Failed to connect to Firebase. Please check your credentials.", Severity.Error);
                return;
            }
            
            _products = await FirebaseService.GetProductsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoadProducts: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            ShowCenteredNotification($"Error loading products: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadRecentActivities()
    {
        try
        {
            _recentActivities = await FirebaseService.GetRecentActivitiesAsync(24);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading recent activities: {ex.Message}");
            ShowCenteredNotification($"Error loading activities: {ex.Message}", Severity.Error);
        }
    }

    private void OpenAddProductDialog()
    {
        _newProduct = new Product();
        _isAddProductDialogOpen = true;
    }

    private void CloseModal()
    {
        _isAddProductDialogOpen = false;
        StateHasChanged();
    }

    private async Task SaveProduct()
    {
        if (string.IsNullOrEmpty(_newProduct.Name) || string.IsNullOrEmpty(_newProduct.Category))
        {
            ShowCenteredNotification("Please fill in all required fields", Severity.Warning);
            return;
        }

        try
        {
            _isSaving = true;
            StateHasChanged();

            // Automatically set status based on stock and threshold
            _newProduct.Status = GetStatusText(_newProduct.Stock, _newProduct.LowStockThreshold);
            _newProduct.StatusColor = GetStatusColor(_newProduct.Stock, _newProduct.LowStockThreshold);

            var success = await FirebaseService.CreateProductWithActivityAsync(_newProduct);
            if (success)
            {
                // Reload products and activities
                await LoadProducts();
                await LoadRecentActivities();
                _isAddProductDialogOpen = false;
                ShowCenteredNotification($"Product '{_newProduct.Name}' added successfully", Severity.Success);
            }
            else
            {
                ShowCenteredNotification($"Failed to add product '{_newProduct.Name}'", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            ShowCenteredNotification($"Error saving product: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private void ShowCenteredNotification(string message, Severity severity)
    {
        Snackbar.Add(message, severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.VisibleStateDuration = 3000;
        });
    }

    // Product statistics computed properties
    private int TotalProducts => _products.Count;
    
    private int InStockCount => _products.Count(p => p.Status == "In stock");
    private int LowStockCount => _products.Count(p => p.Status == "Low stock");
    private int OutOfStockCount => _products.Count(p => p.Status == "Out of stock");
    
    private int InStockPercentage => TotalProducts > 0 ? (int)Math.Round((double)InStockCount / TotalProducts * 100) : 0;
    private int LowStockPercentage => TotalProducts > 0 ? (int)Math.Round((double)LowStockCount / TotalProducts * 100) : 0;
    private int OutOfStockPercentage => TotalProducts > 0 ? (int)Math.Round((double)OutOfStockCount / TotalProducts * 100) : 0;

    private decimal TotalAssetValue => _products.Sum(p => p.Price * p.Stock);

    private List<string> AvailableCategories => _products.Select(p => p.Category).Distinct().ToList();

    private async Task<IEnumerable<string>> SearchCategories(string value, CancellationToken cancellationToken)
    {
        // If no search value, return all categories
        if (string.IsNullOrEmpty(value))
            return AvailableCategories;

        // Get matching categories
        var matchingCategories = AvailableCategories
            .Where(category => category.Contains(value, StringComparison.OrdinalIgnoreCase))
            .ToList();

        // If the typed value is not in the list and it's not empty, add it as a custom option
        if (!string.IsNullOrEmpty(value) && !matchingCategories.Contains(value))
        {
            matchingCategories.Add(value);
        }

        return matchingCategories;
    }

    // Helper methods for automatic status calculation
    private string GetStatusText(int stock, int threshold)
    {
        if (stock == 0)
            return "Out of stock";
        else if (stock <= threshold)
            return "Low stock";
        else
            return "In stock";
    }

    private Color GetStatusColor(int stock, int threshold)
    {
        if (stock == 0)
            return Color.Error;
        else if (stock <= threshold)
            return Color.Warning;
        else
            return Color.Success;
    }

    private void ShowAllActivities()
    {
        _showAllActivities = true;
        StateHasChanged();
    }

    private void ShowLessActivities()
    {
        _showAllActivities = false;
        StateHasChanged();
    }

    private void OpenOutOfStockReport()
    {
        var outOfStockProducts = _products.Where(p => p.Status == "Out of stock").ToList();
        
        if (outOfStockProducts.Any())
        {
            var productList = string.Join("\n", outOfStockProducts.Select(p => $"- {p.Name} ({p.Category})"));
            ShowCenteredNotification($"Out of Stock Products ({outOfStockProducts.Count}):\n{productList}", Severity.Error);
        }
        else
        {
            ShowCenteredNotification("No products are currently out of stock!", Severity.Success);
        }
    }

    private string GetTimeAgo(DateTime timestamp)
    {
        var timeSpan = DateTime.UtcNow - timestamp;
        
        if (timeSpan.TotalDays >= 1)
        {
            var days = (int)timeSpan.TotalDays;
            return $"{days} day{(days == 1 ? "" : "s")} ago";
        }
        else if (timeSpan.TotalHours >= 1)
        {
            var hours = (int)timeSpan.TotalHours;
            return $"{hours} hour{(hours == 1 ? "" : "s")} ago";
        }
        else if (timeSpan.TotalMinutes >= 1)
        {
            var minutes = (int)timeSpan.TotalMinutes;
            return $"{minutes} minute{(minutes == 1 ? "" : "s")} ago";
        }
        else
        {
            return "Just now";
        }
    }
}
