@page "/AdminView"
@using Stockly.Services
@inject FirebaseService FirebaseService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject UserStateService UserState

<PageTitle>Admin View</PageTitle>

<AuthorizedPageBase PageName="AdminView">
    <div class="pa-2 pa-sm-4">
        <!-- Header with Buttons -->
        <div class="d-flex flex-column flex-sm-row justify-space-between align-start align-sm-center mb-3 mb-sm-6">
                         <div>
                 <MudText Typo="Typo.h4" Class="mb-2 mb-sm-0">Admin Dashboard</MudText>
             </div>
            
                    <div class="d-flex gap-1 gap-sm-2">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.PersonAdd" Size="Size.Small" Elevation="0" Style="height: 40px; width: 180px; white-space: nowrap;" OnClick="OpenCreateUserModal">Create New User</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Notifications" Size="Size.Small" Elevation="0" Style="height: 40px; width: 180px; white-space: nowrap;" OnClick="OpenCreateReminderModal">Create Reminder</MudButton>
        </div>
        </div>
        
        <!-- Search and Filter Section -->
        <MudCard Elevation="0" Class="mb-3 mb-sm-4">
            <MudCardContent Class="pa-2 pa-sm-4">
                <div class="d-flex gap-2 align-center" style="align-items: center;">
                    <MudTextField @bind-Value="_searchString" Placeholder="Search products or categories..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" Variant="Variant.Outlined" Style="height: 40px; flex: 1; min-height: 40px; max-height: 40px; line-height: 40px;" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.DateRange" Size="Size.Small" Style="height: 40px; min-width: 140px; min-height: 40px; max-height: 40px; line-height: 40px;" OnClick="OpenDateRangeModal">Date Range</MudButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" Style="height: 40px; width: 40px; min-height: 40px; max-height: 40px; line-height: 40px;" OnClick="ClearAllFilters" title="Clear all filters" Color="Color.Secondary" Variant="Variant.Outlined"></MudIconButton>
                </div>
            </MudCardContent>
        </MudCard>
        
        <!-- Loading State -->
        @if (_isLoading)
        {
            <MudCard Elevation="0">
                <MudCardContent Class="pa-4 text-center">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                         <MudText Class="mt-2">Loading today's Opening Inventory changes...</MudText>
                </MudCardContent>
            </MudCard>
        }
        else
        {
            <!-- Products Table -->
            <MudCard Elevation="0">
                <MudCardContent Class="pa-2 pa-sm-4">
                    @if (FilteredProducts.Any())
                    {
                        <MudTable Items="@FilteredProducts" Dense="true" Hover="true" Striped="true" Breakpoint="Breakpoint.Xs" Responsive="true">
                            <HeaderContent>
                                <MudTh>Product Name</MudTh>
                                <MudTh>Category</MudTh>
                                <MudTh>Today Added</MudTh>
                                <MudTh>Opening</MudTh>
                                <MudTh>Closing</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.Name</MudTd>
                                <MudTd>@context.Category</MudTd>
                                <MudTd>
                                    <MudText Typo="Typo.body2" Color="Color.Primary">
                                        @GetOpeningAddedStock(context)
                                    </MudText>
                                </MudTd>
                                <MudTd>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                                        @if (context.OpeningInventoryQuantity > 0)
                                        {
                                            <span>@context.OpeningInventoryQuantity | @context.OpeningInventorySetBy</span>
                                        }
                                        else
                                        {
                                            <span>-</span>
                                        }
                                    </MudText>
                                </MudTd>
                                <MudTd>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                                        @if (!string.IsNullOrEmpty(context.ClosingInventorySetBy))
                                        {
                                            <span>@context.ClosingInventoryQuantity | @context.ClosingInventorySetBy</span>
                                        }
                                        else
                                        {
                                            <span>-</span>
                                        }
                                    </MudText>
                                </MudTd>

                            </RowTemplate>
                            <PagerContent><MudTablePager /></PagerContent>
                        </MudTable>
                    }
                    else
                    {
                                                 <div class="text-center pa-4">
                             <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" Color="Color.Primary" />
                                                                                          <MudText Typo="Typo.h6" Class="mt-2">
                                   @if (_startDate.HasValue || _endDate.HasValue)
                                   {
                                       <span>No Opening Inventory changes in selected date range</span>
                                   }
                                   else
                                   {
                                       <span>No Opening Inventory changes today</span>
                                   }
                               </MudText>
                               <MudText Typo="Typo.body2" Color="Color.Secondary">
                                   @if (_startDate.HasValue || _endDate.HasValue)
                                   {
                                       <span>This view shows products that have been modified through Opening Inventory in the selected date range</span>
                                   }
                                   else
                                   {
                                       <span>This view only shows products that have been modified through Opening Inventory today</span>
                                   }
                               </MudText>
                         </div>
                    }
                </MudCardContent>
            </MudCard>
        }
    </div>

    <!-- Date Range Filter Modal -->
    @if (_isDateRangeModalOpen)
    {
        <MudOverlay Visible="true" DarkBackground="true" ZIndex="1000">
            <MudCard Style="width: 95%; max-width: 500px; height: 85vh; margin: 0 auto; display: flex; flex-direction: column;" Class="pa-2 pa-sm-4">
                <MudCardHeader Style="position: relative; flex-shrink: 0;" Class="pa-2 pa-sm-4">
                    <MudText Typo="Typo.h6">Filter by Date Range</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                  OnClick="CloseDateRangeModal" 
                                  Size="Size.Small" 
                                  Color="Color.Inherit"
                                  Style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%);" />
                </MudCardHeader>
                
                <MudCardContent Class="pa-2 pa-sm-4" Style="flex: 1; overflow-y: auto;">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle1" Class="mb-2">Select Date Range</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">
                                Filter products that were modified within the selected date range
                            </MudText>
                        </MudItem>
                        
                                                 <MudItem xs="12" sm="6">
                             <MudDatePicker @bind-Date="_tempStartDate" 
                                            Label="Start Date" 
                                            Variant="Variant.Outlined" 
                                            DateFormat="MM/dd/yyyy"
                                            PickerVariant="PickerVariant.Dialog" />
                         </MudItem>
                         
                         <MudItem xs="12" sm="6">
                             <MudDatePicker @bind-Date="_tempEndDate" 
                                            Label="End Date" 
                                            Variant="Variant.Outlined" 
                                            DateFormat="MM/dd/yyyy"
                                            PickerVariant="PickerVariant.Dialog" />
                         </MudItem>
                        
                                                 <MudItem xs="12">
                             <MudButton Variant="Variant.Text" 
                                       Color="Color.Primary" 
                                       OnClick="ClearDateRange" 
                                       StartIcon="@Icons.Material.Filled.Clear">
                                 Clear Date Range
                             </MudButton>
                         </MudItem>
                        
                        @if (!string.IsNullOrEmpty(_dateRangeErrorMessage))
                        {
                            <MudItem xs="12">
                                <MudAlert Severity="Severity.Error" Class="mt-2">@_dateRangeErrorMessage</MudAlert>
                            </MudItem>
                        }
                    </MudGrid>
                </MudCardContent>
                
                <MudCardActions Class="justify-start pa-2 pa-sm-4" Style="flex-shrink: 0;">
                    <MudButton OnClick="CloseDateRangeModal" Variant="Variant.Text" Elevation="0" Class="mr-2">Cancel</MudButton>
                    <MudButton OnClick="ApplyDateRangeFilter" Variant="Variant.Filled" Color="Color.Primary" Elevation="0">Apply Filter</MudButton>
                </MudCardActions>
            </MudCard>
        </MudOverlay>
    }

    <!-- Create Reminder Modal -->
    @if (_isCreateReminderModalOpen)
    {
        <MudOverlay Visible="true" DarkBackground="true" ZIndex="1000">
            <MudCard Style="width: 95%; max-width: 400px; height: 85vh; margin: 0 auto; display: flex; flex-direction: column;" Class="pa-2 pa-sm-4">
                <MudCardHeader Style="position: relative; flex-shrink: 0;" Class="pa-2 pa-sm-4">
                    <MudText Typo="Typo.h6" Color="Color.Inherit">Create Reminder</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                  OnClick="CloseCreateReminderModal" 
                                  Size="Size.Small" 
                                  Color="Color.Inherit"
                                  Style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%);" />
                </MudCardHeader>
                
                <MudCardContent Class="pa-2 pa-sm-4" Style="flex: 1; overflow-y: auto;">
                    <MudForm @ref="reminderForm" @bind-IsValid="isReminderValid" @bind-Errors="reminderErrors">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="_newReminder.Title" 
                                             Label="Reminder Title" 
                                             Variant="Variant.Outlined" 
                                             Required="true" 
                                             RequiredError="Please enter a title"
                                             Adornment="Adornment.Start" 
                                             AdornmentIcon="@Icons.Material.Filled.Title" />
                            </MudItem>
                            
                                                                                     <MudItem xs="12">
                                <MudTextField @bind-Value="_newReminder.Message" 
                                             Label="Message" 
                                             Variant="Variant.Outlined" 
                                             Required="true" 
                                             RequiredError="Please enter a message"
                                             Lines="16" />
                            </MudItem>
                            
                            @if (!string.IsNullOrEmpty(reminderErrorMessage))
                            {
                                <MudItem xs="12">
                                    <MudAlert Severity="Severity.Error" Class="mt-2">@reminderErrorMessage</MudAlert>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudForm>
                </MudCardContent>
                
                <MudCardActions Class="justify-start pa-2 pa-sm-4" Style="flex-shrink: 0;">
                    <MudButton OnClick="CloseCreateReminderModal" Variant="Variant.Text" Elevation="0" Class="mr-2" Disabled="@_isSavingReminder">Cancel</MudButton>
                    <MudButton OnClick="CreateReminder" Variant="Variant.Filled" Color="Color.Warning" Elevation="0" Disabled="@_isSavingReminder">
                        @if (_isSavingReminder)
                        {
                            <MudProgressCircular Size="Size.Small" Color="Color.Inherit" Indeterminate="true" />
                        }
                        else
                        {
                            <span>Create Reminder</span>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudOverlay>
    }

    <!-- Create User Modal -->
    @if (_isCreateUserModalOpen)
    {
        <MudOverlay Visible="true" DarkBackground="true" ZIndex="1000">
            <MudCard Style="width: 95%; max-width: 400px; height: 85vh; margin: 0 auto; display: flex; flex-direction: column;" Class="pa-2 pa-sm-4">
                <MudCardHeader Style="position: relative; flex-shrink: 0;" Class="pa-2 pa-sm-4">
                    <MudText Typo="Typo.h6" Color="Color.Inherit">Create New User</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                  OnClick="CloseCreateUserModal" 
                                  Size="Size.Small" 
                                  Color="Color.Inherit"
                                  Style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%);" />
                </MudCardHeader>
                
                <MudCardContent Class="pa-2 pa-sm-4" Style="flex: 1; overflow-y: auto;">
                    <MudForm @ref="form" @bind-IsValid="isValid" @bind-Errors="errors">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="_newUser.Username" 
                                             Label="Username" 
                                             Variant="Variant.Outlined" 
                                             Required="true" 
                                             RequiredError="Please enter a username"
                                             Adornment="Adornment.Start" 
                                             AdornmentIcon="@Icons.Material.Filled.Person" />
                            </MudItem>
                            
                            <MudItem xs="12">
                                <MudTextField @bind-Value="_newUser.Password" 
                                             Label="Password" 
                                             Variant="Variant.Outlined" 
                                             Required="true" 
                                             RequiredError="Please enter a password"
                                             InputType="InputType.Password"
                                             Adornment="Adornment.Start" 
                                             AdornmentIcon="@Icons.Material.Filled.Lock" />
                            </MudItem>
                            
                            <MudItem xs="12">
                                <MudTextField @bind-Value="_newUser.ConfirmPassword" 
                                             Label="Confirm Password" 
                                             Variant="Variant.Outlined" 
                                             Required="true" 
                                             RequiredError="Please confirm your password"
                                             InputType="InputType.Password"
                                             Adornment="Adornment.Start" 
                                             AdornmentIcon="@Icons.Material.Filled.Lock" />
                            </MudItem>
                            
                            <MudItem xs="12">
                                <MudTextField @bind-Value="_newUser.Email" 
                                             Label="Email (Optional)" 
                                             Variant="Variant.Outlined"
                                             Adornment="Adornment.Start" 
                                             AdornmentIcon="@Icons.Material.Filled.Email" />
                            </MudItem>
                            
                            <MudItem xs="12">
                                <MudSelect T="string" @bind-Value="_newUser.Role" Label="Role" Variant="Variant.Outlined" Required="true" RequiredError="Please select a role">
                                    <MudSelectItem Value="@("admin")">Admin</MudSelectItem>
                                    <MudSelectItem Value="@("opening")">Opening</MudSelectItem>
                                    <MudSelectItem Value="@("closing")">Closing</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <MudItem xs="12">
                                    <MudAlert Severity="Severity.Error" Class="mt-2">@errorMessage</MudAlert>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudForm>
                </MudCardContent>
                
                <MudCardActions Class="justify-start pa-2 pa-sm-4" Style="flex-shrink: 0;">
                    <MudButton OnClick="CloseCreateUserModal" Variant="Variant.Text" Elevation="0" Class="mr-2" Disabled="@_isSaving">Cancel</MudButton>
                    <MudButton OnClick="CreateUser" Variant="Variant.Filled" Color="Color.Primary" Elevation="0" Disabled="@_isSaving">
                        @if (_isSaving)
                        {
                            <MudProgressCircular Size="Size.Small" Color="Color.Inherit" Indeterminate="true" />
                        }
                        else
                        {
                            <span>Create User</span>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudOverlay>
    }
</AuthorizedPageBase>

@code {
    private bool _isCreateUserModalOpen = false;
    private bool _isSaving = false;
    private string errorMessage = string.Empty;
    private MudForm form = null!;
    private bool isValid;
    private string[] errors = Array.Empty<string>();

    private NewUser _newUser = new();

    // Table variables
    private string _searchString = "";
    private bool _isLoading = true;
    private List<Product> _products = [];
    private string _sortOrder = "name_asc";
    private string _selectedCategory = "";
    

    
    // Date range filter variables
    private bool _isDateRangeModalOpen = false;
    private DateTime? _startDate = null;
    private DateTime? _endDate = null;
    private DateTime? _tempStartDate = null;
    private DateTime? _tempEndDate = null;
    private string _dateRangeErrorMessage = "";

    private void OpenCreateUserModal()
    {
        _newUser = new NewUser();
        errorMessage = string.Empty;
        _isCreateUserModalOpen = true;
    }

    private void CloseCreateUserModal()
    {
        _isCreateUserModalOpen = false;
        _newUser = new NewUser();
        errorMessage = string.Empty;
    }

    // Date range filter methods
    private void OpenDateRangeModal()
    {
        _tempStartDate = _startDate;
        _tempEndDate = _endDate;
        _dateRangeErrorMessage = "";
        _isDateRangeModalOpen = true;
    }

    private void CloseDateRangeModal()
    {
        _isDateRangeModalOpen = false;
        _dateRangeErrorMessage = "";
    }

    private void ClearDateRange()
    {
        _tempStartDate = null;
        _tempEndDate = null;
        _dateRangeErrorMessage = "";
    }

    private void ApplyDateRangeFilter()
    {
        // Check if no dates are selected at all
        if (!_tempStartDate.HasValue && !_tempEndDate.HasValue)
        {
            Snackbar.Add("Please select date range", Severity.Warning);
            return;
        }

        // Check if only end date is selected without start date
        if (!_tempStartDate.HasValue && _tempEndDate.HasValue)
        {
            Snackbar.Add("Please enter date start", Severity.Warning);
            return;
        }

        // Check if only start date is selected without end date
        if (_tempStartDate.HasValue && !_tempEndDate.HasValue)
        {
            Snackbar.Add("Please select date end", Severity.Warning);
            return;
        }

        // Validate date range
        if (_tempStartDate.HasValue && _tempEndDate.HasValue && _tempStartDate > _tempEndDate)
        {
            _dateRangeErrorMessage = "Start date cannot be after end date";
            return;
        }

        _startDate = _tempStartDate;
        _endDate = _tempEndDate;
        _dateRangeErrorMessage = "";
        
        string dateRangeText = "";
        if (_startDate.HasValue && _endDate.HasValue)
        {
            dateRangeText = $" from {_startDate.Value:MM/dd/yyyy} to {_endDate.Value:MM/dd/yyyy}";
        }
        else if (_startDate.HasValue)
        {
            dateRangeText = $" from {_startDate.Value:MM/dd/yyyy}";
        }
        else if (_endDate.HasValue)
        {
            dateRangeText = $" until {_endDate.Value:MM/dd/yyyy}";
        }
        
        CloseDateRangeModal();
        
        // Show how many products are being filtered
        var filteredCount = FilteredProducts.Count;
        ShowCenteredNotification($"Filter Applied, showing {filteredCount} products", Severity.Success);
        

    }

    private async Task CreateUser()
    {
        await form.Validate();
        
        if (!isValid)
        {
            errorMessage = "Please fill out all required fields";
            return;
        }

        // Validate password confirmation
        if (_newUser.Password != _newUser.ConfirmPassword)
        {
            errorMessage = "Passwords do not match";
            return;
        }

        // Validate password strength
        if (_newUser.Password.Length < 6)
        {
            errorMessage = "Password must be at least 6 characters long";
            return;
        }

        errorMessage = string.Empty;
        _isSaving = true;

        try
        {
            var success = await FirebaseService.CreateUserAsync(
                _newUser.Username, 
                _newUser.Password, 
                _newUser.Email, 
                _newUser.Role
            );

            if (success)
            {
                Snackbar.Add($"User '{_newUser.Username}' created successfully!", Severity.Success);
                CloseCreateUserModal();
            }
            else
            {
                errorMessage = "Username already exists. Please choose a different username.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while creating the user. Please try again.";
        }
        finally
        {
            _isSaving = false;
        }
    }

    public class NewUser
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Role { get; set; } = "opening";
    }

    // Reminder functionality
    private bool _isCreateReminderModalOpen = false;
    private bool _isSavingReminder = false;
    private string reminderErrorMessage = string.Empty;
    private MudForm reminderForm = null!;
    private bool isReminderValid;
    private string[] reminderErrors = Array.Empty<string>();

    private NewReminder _newReminder = new();

    private void OpenCreateReminderModal()
    {
        _newReminder = new NewReminder();
        reminderErrorMessage = string.Empty;
        _isCreateReminderModalOpen = true;
    }

    private void CloseCreateReminderModal()
    {
        _isCreateReminderModalOpen = false;
        _newReminder = new NewReminder();
        reminderErrorMessage = string.Empty;
    }

    private async Task CreateReminder()
    {
        await reminderForm.Validate();
        
        if (!isReminderValid)
        {
            reminderErrorMessage = "Please fill out all required fields";
            return;
        }

        // Validate input
        if (string.IsNullOrWhiteSpace(_newReminder.Title))
        {
            reminderErrorMessage = "Title is required";
            return;
        }

        if (string.IsNullOrWhiteSpace(_newReminder.Message))
        {
            reminderErrorMessage = "Message is required";
            return;
        }

        reminderErrorMessage = string.Empty;
        _isSavingReminder = true;

        try
        {
            // Test Firebase connection first
            var connectionTest = await FirebaseService.TestConnectionAsync();
            if (!connectionTest)
            {
                reminderErrorMessage = "Failed to connect to database. Please check your connection.";
                return;
            }
            
            var creatorUsername = UserState.CurrentUser?.Username ?? "Admin";
            
            var success = await FirebaseService.CreateReminderAsync(
                _newReminder.Title, 
                _newReminder.Message, 
                creatorUsername
            );

            if (success)
            {
                Snackbar.Add($"Reminder '{_newReminder.Title}' created successfully!", Severity.Success);
                CloseCreateReminderModal();
                UserState.NotifyReminderUpdated(); // Notify UserState that a reminder was updated
            }
            else
            {
                reminderErrorMessage = "Failed to create reminder. Please try again.";
            }
        }
        catch (Exception ex)
        {
            reminderErrorMessage = $"An error occurred while creating the reminder: {ex.Message}";
        }
        finally
        {
            _isSavingReminder = false;
        }
    }

    public class NewReminder
    {
        public string Title { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
    }

    // Table methods
    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            await InvokeAsync(() => _isLoading = true);
            
            // Test Firebase connection first
            var connectionTest = await FirebaseService.TestConnectionAsync();
            if (!connectionTest)
            {
                await InvokeAsync(() => ShowCenteredNotification("Failed to connect to Firebase. Please check your credentials.", Severity.Error));
                return;
            }
            
            _products = await FirebaseService.GetProductsAsync();
        }
        catch (Exception ex)
        {
            await InvokeAsync(() => ShowCenteredNotification($"Error loading products: {ex.Message}", Severity.Error));
        }
        finally
        {
            await InvokeAsync(() => 
            {
                _isLoading = false;
                StateHasChanged();
            });
        }
    }

    private List<Product> FilteredProducts
    {
        get
        {
            // Get today's date in Philippine timezone
            var today = DateTime.UtcNow.AddHours(8).Date;
            
            // Start with all products that have been modified through Opening Inventory (stock updates)
            // Show products that have OpeningAddedStock > 0 (Add Stock) OR OpeningInventoryQuantity > 0 (Set Inventory)
            var openingModifiedProducts = _products.Where(product => 
                (product.OpeningAddedStock > 0 || product.OpeningInventoryQuantity > 0) && // Products modified through Opening Inventory
                product.LastUpdated.HasValue &&
                (string.IsNullOrEmpty(_searchString) || 
                 product.Name.ToLower().Contains(_searchString.ToLower()) ||
                 product.Category.ToLower().Contains(_searchString.ToLower())) &&
                (string.IsNullOrEmpty(_selectedCategory) || product.Category == _selectedCategory));

            // Apply date filtering
            if (_startDate.HasValue || _endDate.HasValue)
            {
                // If user has set custom date range, use that instead of today's filter
                openingModifiedProducts = openingModifiedProducts.Where(product =>
                {
                    if (product.LastUpdated == null) return false;
                    
                    var productDate = product.LastUpdated.Value.Date; // Ensure we're comparing dates only
                    
                    // Debug: Log the dates being compared
                    Console.WriteLine($"Product: {product.Name}, ProductDate: {productDate:yyyy-MM-dd}, StartDate: {_startDate?.Date:yyyy-MM-dd}, EndDate: {_endDate?.Date:yyyy-MM-dd}");
                    
                    // If only start date is set, filter products modified on or after start date
                    if (_startDate.HasValue && !_endDate.HasValue)
                    {
                        var result = productDate >= _startDate.Value.Date;
                        Console.WriteLine($"  Start date only filter: {result}");
                        return result;
                    }
                    
                    // If only end date is set, filter products modified on or before end date
                    if (!_startDate.HasValue && _endDate.HasValue)
                    {
                        var result = productDate <= _endDate.Value.Date;
                        Console.WriteLine($"  End date only filter: {result}");
                        return result;
                    }
                    
                    // If both dates are set, filter products modified between start and end date (inclusive)
                    if (_startDate.HasValue && _endDate.HasValue)
                    {
                        var result = productDate >= _startDate.Value.Date && productDate <= _endDate.Value.Date;
                        Console.WriteLine($"  Both dates filter: {result}");
                        return result;
                    }
                    
                    return true;
                });
            }
            else
            {
                // If no custom date range is set, default to today's changes only
                openingModifiedProducts = openingModifiedProducts.Where(product => 
                    product.LastUpdated.Value.Date == today);
            }

            return _sortOrder switch
            {
                "name_asc" => openingModifiedProducts.OrderBy(p => p.Name).ToList(),
                "name_desc" => openingModifiedProducts.OrderByDescending(p => p.Name).ToList(),
                _ => openingModifiedProducts.OrderBy(p => p.Name).ToList()
            };
        }
    }

    private void EditProduct(Product product)
    {
        ShowCenteredNotification($"Edit product: {product.Name}", Severity.Info);
    }

    private void AddStockProduct(Product product)
    {
        ShowCenteredNotification($"Add stock to: {product.Name}", Severity.Info);
    }

    private void ClearCache()
    {
        // No caching implemented
    }

    private void ClearAllFilters()
    {
        // Clear all actual filter values immediately
        _searchString = "";
        _selectedCategory = "";
        _sortOrder = "name_asc";
        _startDate = null;
        _endDate = null;
        
        ShowCenteredNotification("All filters cleared", Severity.Info);
        StateHasChanged();
    }

    private string GetTimeAgo(DateTime timestamp)
    {
        var philippineTime = DateTime.UtcNow.AddHours(8);
        var timeSpan = philippineTime - timestamp;
        
        if (timeSpan.TotalDays >= 365)
        {
            var years = (int)(timeSpan.TotalDays / 365);
            return $"{years} year{(years == 1 ? "" : "s")} ago";
        }
        else if (timeSpan.TotalDays >= 30)
        {
            var months = (int)(timeSpan.TotalDays / 30);
            return $"{months} month{(months == 1 ? "" : "s")} ago";
        }
        else if (timeSpan.TotalDays >= 1)
        {
            var days = (int)timeSpan.TotalDays;
            return $"{days} day{(days == 1 ? "" : "s")} ago";
        }
        else if (timeSpan.TotalHours >= 1)
        {
            var hours = (int)timeSpan.TotalHours;
            return $"{hours} hour{(hours == 1 ? "" : "s")} ago";
        }
        else if (timeSpan.TotalMinutes >= 1)
        {
            var minutes = (int)timeSpan.TotalMinutes;
            return $"{minutes} minute{(minutes == 1 ? "" : "s")} ago";
        }
        else
        {
            return "Just now";
        }
    }

    private void ShowCenteredNotification(string message, Severity severity)
    {
        Snackbar.Add(message, severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.VisibleStateDuration = 3000;
        });
    }

    private string GetOpeningAddedStock(Product product)
    {
        // Show today added stock (this is what gets updated when adding stock through Opening Inventory)
        if (product.TodayAddedStock > 0)
        {
            return $"{product.TodayAddedStock} units";
        }
        
        return "0 units";
    }
}